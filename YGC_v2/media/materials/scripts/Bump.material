fragment_program Ogre/BasicFragmentPrograms/DiffuseOneTextureCg cg
{
    source Example_Basic.cg
    entry_point diffuseOneTexture_fp
    profiles ps_2_0 arbfp1
}



// Bump map vertex program, support for this is required
vertex_program Examples/BumpMapVPCg cg
{
	source Example_BumpMapping.cg
	entry_point main_vp
	profiles vs_4_0 vs_1_1 arbvp1
}

vertex_program Examples/BumpMapVP unified
{
	delegate Examples/BumpMapVPCg
}



// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFPCg cg
{
	source Example_BumpMapping.cg
	entry_point main_fp
	profiles ps_4_0 ps_2_0 arbfp1 fp20
}

fragment_program Examples/BumpMapFP unified
{
	delegate Examples/BumpMapFPCg
}



vertex_program Examples/BumpMapVPSpecularCg cg
{
	source Example_BumpMapping.cg
	entry_point specular_vp
	profiles vs_4_0 vs_1_1 arbvp1
}

vertex_program Examples/BumpMapVPSpecular unified
{
	delegate Examples/BumpMapVPSpecularCg
}



// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFPSpecularCg cg
{
	source Example_BumpMapping.cg
	entry_point specular_fp
	profiles ps_4_0 ps_2_0 arbfp1 fp20
}
fragment_program Examples/BumpMapFPSpecular unified
{
	delegate Examples/BumpMapFPSpecularCg
}




// A really basic ambient pass program, support for one texture coordinate set
vertex_program Ogre/BasicVertexPrograms/AmbientOneTextureCg cg
{
    source Example_Basic.cg
    entry_point ambientOneTexture_vp
    profiles vs_1_1 arbvp1

    default_params
    {
        param_named_auto worldViewProj worldviewproj_matrix
        param_named_auto ambient ambient_light_colour
    }
}

vertex_program Ogre/BasicVertexPrograms/AmbientOneTextureUnified unified
{
    delegate Ogre/BasicVertexPrograms/AmbientOneTextureCg
}



// A really basic ambient pass program, support for one texture coordinate set
fragment_program Ogre/BasicFragmentPrograms/PassthroughFP unified
{    
    delegate Ogre/BasicFragmentPrograms/PassthroughFpCg
}

fragment_program Ogre/BasicFragmentPrograms/PassthroughFpCg cg
{
    entry_point mainCg
    source PassthroughFP.cg
    profiles ps_4_0 ps_2_0 arbfp1
}



// Bump map fragment program shadow receiver, support for this is optional
vertex_program Examples/BumpMapVPShadowRcv unified
{
	delegate Examples/BumpMapVPShadowRcvCg
}

// Bump map vertex program shadow receiver
vertex_program Examples/BumpMapVPShadowRcvCg cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_vp
	profiles vs_1_1 arbvp1
}


// Bump map fragment program shadow receiver, support for this is optional
fragment_program Examples/BumpMapFPShadowRcvCg cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_fp
	profiles ps_2_0 arbfp1 fp20
}

fragment_program Examples/BumpMapFPShadowRcv unified
{
	delegate Examples/BumpMapFPShadowRcvCg
}




// Any number of lights, diffuse
material Examples/BumpMapping/MultiLight
{
// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass ambient
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0 
			specular 0 0 0 0 
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTextureUnified
			{
				param_named_auto ambient ambient_light_colour
			}
			fragment_program_ref Ogre/BasicFragmentPrograms/PassthroughFP
			{
			}
			
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			
			// do this for each light
			iteration once_per_light

		
			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFP
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
			}

			// texture shadow receiver program
			shadow_receiver_vertex_program_ref Examples/BumpMapVPShadowRcv
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto worldMatrix world_matrix
				param_named_auto texViewProj texture_viewproj_matrix
			}
			// Additive texture shadow receiver program
			shadow_receiver_fragment_program_ref Examples/BumpMapFPShadowRcv
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
			}
			
			// Base bump map
			texture_unit normalmap
			{
				texture NMBumpsOut.png
				colour_op replace
			}
		}
		
		// Decal pass
		pass decal
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTextureUnified
			{
				param_named ambient float4 1 1 1 1
			}
			fragment_program_ref Ogre/BasicFragmentPrograms/DiffuseOneTextureCg
			{
			}
			scene_blend dest_colour zero
			texture_unit decalmap
			{
				texture RustedMetal.jpg 
			}
			
		}
	}
}

// Any number of lights, diffuse and specular
material Examples/BumpMapping/MultiLightSpecular : Examples/BumpMapping/MultiLight
{
	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Overlay nothing new onto the old ambient pass
		pass ambient
		{
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVPSpecular
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto eyePosition camera_position_object_space
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFPSpecular
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
				param_named_auto lightSpecular light_specular_colour 0
			}
			
		}
		
	}
}

material Examples/Athene/NormalMapped : Examples/BumpMapping/MultiLight
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{
			// Base bump map
			texture_unit normalmap
			{
				texture atheneNormalMap.png
				colour_op replace
			}
		}
		
		// Decal pass
		pass decal
		{
			texture_unit decalmap
			{
				texture egyptrockyfull.jpg 
			}
		}
	}
}

// Basic Athene statue
material Examples/Athene/Basic
{

	technique
	{
		pass
		{
			ambient 0.3 0.3 0.3
			diffuse 1.0 1.0 0.9

			texture_unit
			{
				texture egyptrockyfull.jpg 
			}
			
		}
	}
}